const express = require("express");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const router = express.Router();

router.put("/update-professional/:id", async function (req, res, next) {
  const { 
    first_name, 
    last_name, 
    abn, 
    password, 
    suburb, 
    state, 
    postcode, 
    card_number, 
    card_security_num, 
    card_expiry_date, 
    service_type_id 
  } = req.body;

  // Validate inputs
  if (!first_name || !last_name || !abn || !password || !suburb || !state || !postcode || !card_number || !card_security_num || !card_expiry_date || !service_type_id) {
    return res.status(400).json({ error: "All fields are required" });
  }

  const id = parseInt(req.params.id, 10);
  if (isNaN(id)) {
    return res.status(400).json({ error: "Invalid professional id" });
  }

  try {
    const professional = await prisma.professional.findUnique({
      where: { id: id },
    });

    if (!professional) {
      return res.status(404).json({ status: "error", message: "Professional not found" });
    }

    const now = new Date();

    if (!professional.failed_update_timestamp || now - new Date(professional.failed_update_timestamp) > 10 * 60 * 1000) {
      professional.failed_update_count = 0;
    }

    professional.failed_update_count += 1;
    professional.failed_update_timestamp = now;

    if (professional.failed_update_count >= 3) {
      await prisma.professional.update({
        where: { id: id },
        data: {
          failed_update_count: professional.failed_update_count,
          failed_update_timestamp: professional.failed_update_timestamp,
        },
      });

      return res.status(400).json({
        status: "error",
        message: "You have failed to update your profile 3 times. Please try again after 10 minutes.",
      });
    }

    const updatedProfessional = await prisma.professional.update({
      where: { id: id },
      data: {
        first_name: first_name,
        last_name: last_name,
        abn: abn,
        password: password,
        suburb: suburb,
        state: state,
        postcode: postcode,
        card_number: card_number,
        card_security_num: card_security_num,
        card_expiry_date: new Date(card_expiry_date),
        service_type_id: service_type_id,
        failed_update_count: professional.failed_update_count,
        failed_update_timestamp: professional.failed_update_timestamp,
      },
    });

    return res.status(200).json(updatedProfessional);
  } catch (error) {
    next(error);
  }
});

module.exports = router;
